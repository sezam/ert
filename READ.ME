Приложение для учета проката автомобилей.

База состоит из нескольких таблиц:
- Таблица моделей автомобилей
- Таблица офисов (точек аренды)
- Таблица арендаторов
- Таблица записей событий с автомобилем

По сути ведется учет событий с автомобилем: выдача, возврат, авария, угон.

На главной странице выводится список событий. При запуске приложения, таблица заполняется случайными данными.
Ссылка "Add a new rent" открывает страницу создания новой записи.

Ссылка "Statistics" открывает страницу со статистикой. Статистику не доделал. Выбор хранения даты в строке позволил
быстро сделать сервис и api, но запрос к базе с обработкой дат стал очень некрасивый. В консоли H2 можно проверить.
select r1.car_model_id, r2.office_id, avg(datediff(day, parsedatetime(r2.event_date, 'yyyy-MM-dd'), parsedatetime(r1.event_date, 'yyyy-MM-dd')) ) av from (SELECT * FROM RENT where CAR_EVENT like '%Return' ) r1 inner join  rent r2 on  r1.car_model_id=r2.car_model_id and r1.customer_id=r2.customer_id and r1.car_number=r2.car_number and r1.car_event != r2.car_event group by r1.car_model_id, r2.office_id
CAR_MODEL_ID  	OFFICE_ID  	AV
1	6	5
1	7	6
2	6	5
2	7	7

В заголовке таблицы поля для фильтра по значению. Выбираем доступные значения и нажимаем кнопку справа. Фильтрация
выполняется по всей таблице в коде, последовательно фильтруя результат запроса.
В каждой строке есть кнопка удаления записи.

Все запросы к базе производятся через REST сервис, созданный классом ApiController. Внутри сервиса работа с базой
организована через JPA используя автогенерацию методов Spring.
Вэб приложение обрабатывается классом RentController.

Чтобы все проверить, в консоли выполнить
mvn spring-boot:run

в броузере открыть
http://localhost:8080/ для вэб-приложения
http://localhost:8080/h2-console для консоли встроенной базы (sa/sa)